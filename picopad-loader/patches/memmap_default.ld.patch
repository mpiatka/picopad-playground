--- memmap_default.ld.patch
+++ memmap_default.ld
@@ -21,9 +21,10 @@
     __stack (== StackTop)
 */

+/* Skip 196kB at the start of flash, that's where our bootloader is */
 MEMORY
 {
-    FLASH(rx) : ORIGIN = 0x10000000, LENGTH = __FLASH_LENGTH__
+    FLASH(rx) : ORIGIN = 0x10000000 + 196k, LENGTH = __FLASH_LENGTH__ - 196k
     RAM(rwx) : ORIGIN =  0x20000000, LENGTH = __RAM_LENGTH__
     SCRATCH_X(rwx) : ORIGIN = 0x20040000, LENGTH = 4k
     SCRATCH_Y(rwx) : ORIGIN = 0x20041000, LENGTH = 4k
@@ -46,36 +47,7 @@ SECTIONS
         __flash_binary_start = .;
     } > FLASH

-    .boot2 : {
-        __boot2_start__ = .;
-        KEEP (*(.boot2))
-        __boot2_end__ = .;
-    } > FLASH
-
-    ASSERT(__boot2_end__ - __boot2_start__ == 256,
-        "ERROR: Pico second stage bootloader must be 256 bytes in size")
-
-    .ota : {
-        /* Start image with OTA */
-        KEEP (*(.OTA))
-        /* Align to the last 16-bytes of the OTA region */
-        /* If anyone has a better way of doing this, please submit a PR! */
-       /* . = __flash_binary_start + 0x2ff0;
-        LONG(__FS_START__)
-        LONG(__FS_END__)
-        LONG(__EEPROM_START__)
-        LONG(__FLASH_LENGTH__)*/
-    } > FLASH
-
-    .partition : {
-        /* Align to the last 16-bytes of the OTA region */
-        /* If anyone has a better way of doing this, please submit a PR! */
-        . = __flash_binary_start + 0x2ff0;
-        LONG(__FS_START__)
-        LONG(__FS_END__)
-        LONG(__EEPROM_START__)
-        LONG(__FLASH_LENGTH__)
-    } > FLASH
+    /* boot2 would go here, but we don't want it */

     /* The second stage will always enter the image at the start of .text.
        The debugger will use the ELF entry point, which is the _entry_point
